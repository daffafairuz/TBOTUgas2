class CYKParser:
    def __init__(self, grammar):
        self.grammar = grammar
        self.non_terminals = {lhs for lhs, _ in grammar}
    
    def parse(self, input_string):
        n = len(input_string)
        # Membuat tabel 2D untuk menyimpan hasil parsing
        table = [[set() for _ in range(n)] for _ in range(n)]
        
        # Mengisi tabel untuk substring panjang 1 (token terminal)
        for i in range(n):
            for lhs, rhs in self.grammar:
                if rhs == input_string[i]:
                    table[i][i].add(lhs)

        # Mengisi tabel untuk substring yang lebih panjang
        for length in range(2, n + 1):  # length dari 2 sampai n
            for i in range(n - length + 1):  # mulai dari i
                j = i + length - 1  # akhir substring
                for k in range(i, j):  # membagi substring
                    for lhs, rhs in self.grammar:
                        if len(rhs) == 2:  # pastikan RHS memiliki dua simbol
                            if rhs[0] in table[i][k] and rhs[1] in table[k + 1][j]:
                                table[i][j].add(lhs)

        return table[0][n - 1]

# Definisikan grammar sesuai dengan yang diberikan
grammar = [
    ('S', 'AB'),
    ('S', 'BC'),
    ('A', 'BA'),
    ('A', 'a'),
    ('B', 'CC'),
    ('B', 'b'),
    ('C', 'AB'),
    ('C', 'a')
]

# Buat parser CYK
cyk_parser = CYKParser(grammar)

# Uji dengan string 'baaba'
test_string = 'baaba'
result = cyk_parser.parse(test_string)

if 'S' in result:
    print(f"The string '{test_string}' is generated by the grammar.")
else:
    print(f"The string '{test_string}' is NOT generated by the grammar.")
